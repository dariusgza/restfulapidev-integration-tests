{
	"info": {
		"_postman_id": "f1175dba-9595-4df2-9755-8da505e3bc07",
		"name": "api.restfull.dev.demo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10606446"
	},
	"item": [
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "GetAllObjects - Invalid Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Status code is 404\r",
									"pm.sendRequest({ url: pm.environment.get('baseUrl') + '/invalid-endpoint', method: 'GET' }, function (err, res) {\r",
									"    pm.test('Invalid endpoint returns 404', function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Test: Validate response body structure & output\r",
									"pm.test('Response should have the correct properties', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('object');\r",
									"    pm.expect(response).to.have.property('timestamp');\r",
									"    pm.expect(response).to.have.property('status', 404);\r",
									"    pm.expect(response).to.have.property('error', 'Not Found');\r",
									"    pm.expect(response).to.have.property('path').that.is.a('string').and.includes('invalid-endpoint');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/invalid-endpoint",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"invalid-endpoint"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetObjectByID - Non-Existent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Status code is 404\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Test: Response has an error message\r",
									"pm.test(\"Response has an error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.exist;\r",
									"    pm.expect(jsonData.error).to.be.a('string');\r",
									"    pm.expect(jsonData.error).to.include(\"id=99999 was not found.\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/objects/99999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"objects",
								"99999"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetObjectByID - EmptyID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect([200]).to.include(pm.response.code);\r",
									"});\r",
									"\r",
									"// Test: Response has raw test message\r",
									"pm.test(\"Response has raw test message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Hello world from Spring Boot\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/objects/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"objects",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "AddObject - Empty Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Status code is 200 or 201\r",
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect([200, 201]).to.include(pm.response.code);\r",
									"});\r",
									"\r",
									"// Test: Response contains created object with id, name, and data\r",
									"const response = pm.response.json();\r",
									"pm.test(\"Response contains created object with id, name, and data\", function () {\r",
									"    pm.expect(response).to.have.property('id');\r",
									"    pm.expect(response).to.have.property('name').that.to.be.null;\r",
									"    pm.expect(response).to.have.property('data').that.to.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/objects",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateObject - Object Does Not Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Update non-existent object returns 404, 400, or 422\r",
									"pm.sendRequest({\r",
									"    url: pm.environment.get('baseUrl') + '/objects/doesnotexist',\r",
									"    method: 'PUT',\r",
									"    header: { 'Content-Type': 'application/json' },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({ name: 'Test', data: {} })\r",
									"    }\r",
									"}, function (res) {\r",
									"    pm.test('Update non-existent object returns 404, 400, or 422', function () {\r",
									"        pm.expect([404, 400, 422]).to.include(pm.response.code);\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test: Response body contains error message\r",
									"pm.test('Response body contains error message', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.exist;\r",
									"    pm.expect(jsonData.error).to.be.a('string');\r",
									"    pm.expect(pm.response.text()).to.include('doesnotexist');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"name\": \"Apple MacBook Pro 16\",\r\n   \"data\": {\r\n      \"year\": 2019,\r\n      \"price\": 2049.99,\r\n      \"CPU model\": \"Intel Core i9\",\r\n      \"Hard disk size\": \"1 TB\",\r\n      \"color\": \"silver\"\r\n   }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/objects/doesnotexist",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"objects",
								"doesnotexist"
							]
						}
					},
					"response": []
				},
				{
					"name": "PartialUpdateObject - Non-Existent Object",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: pm.environment.get('baseUrl') + '/objects/doesnotexist',\r",
									"    method: 'PATCH',\r",
									"    header: { 'Content-Type': 'application/json' },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({ name: 'Test' })\r",
									"    }\r",
									"}, function (res) {\r",
									"    pm.test('Patch non-existent object returns 404, 400, or 422', function () {\r",
									"        pm.expect([404, 400, 422]).to.include(pm.response.code);\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test: Response body contains error message\r",
									"pm.test('Response body contains error message', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.exist;\r",
									"    pm.expect(jsonData.error).to.be.a('string');\r",
									"    pm.expect(pm.response.text()).to.include('doesnotexist');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"name\": \"Apple MacBook Pro M4 (Updated Name)\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/objects/doesnotexist",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"objects",
								"doesnotexist"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteObject - No ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect([200]).to.include(pm.response.code);\r",
									"});\r",
									"\r",
									"// Test: Response has raw test message\r",
									"pm.test(\"Response has raw test message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Hello world from Spring Boot\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/objects/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"objects",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteObject - Whitepspace ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Status code is 404\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect([404]).to.include(pm.response.code);\r",
									"});\r",
									"\r",
									"// Test: Response has an error message\r",
									"pm.test(\"Response has an error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.exist;\r",
									"    pm.expect(jsonData.error).to.be.a('string');\r",
									"    pm.expect(jsonData.error).to.include(\"Object with id =   doesn't exist.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/objects/ ",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"objects",
								" "
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteObject - Reserve Object",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Status code is 405\r",
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"// Test: Response body contains an errormessage\r",
									"pm.test(\"Response body contains an errormessage\", function () {\r",
									"    const body = pm.response.text();\r",
									"    pm.expect(body.includes('error')).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/objects/6",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"objects",
								"6"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "List of all objects",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test: Status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test: Response is an array with multiple objects\r",
							"pm.test(\"Response is an array with multiple objects\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.be.an('array').that.has.length.greaterThan(1);\r",
							"});\r",
							"\r",
							"// Test: Validate the required schema for each object in the response\r",
							"const response = pm.response.json();\r",
							"const expectedSchema = {\r",
							"    type: 'object',\r",
							"    properties: {\r",
							"        id: { type: 'string' },\r",
							"        name: { type: 'string' },\r",
							"        data: {\r",
							"            type: ['object', 'null']\r",
							"        }\r",
							"    },\r",
							"    required: ['id', 'name', 'data']\r",
							"};\r",
							"pm.test(\"Validate the required schema for each object in the response\", function () {\r",
							"    response.forEach(item => {\r",
							"        pm.expect(item).to.be.jsonSchema(expectedSchema);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/objects",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"objects"
					]
				}
			},
			"response": []
		},
		{
			"name": "List of objects by ids",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test: Status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test: Response is an array with 2 objects\r",
							"pm.test(\"Response is an array with 2 objects\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.be.an('array').that.has.length.greaterThanOrEqual(2);\r",
							"});\r",
							"\r",
							"// Test: Validate the required schema for each object in the response\r",
							"const response = pm.response.json();\r",
							"const expectedSchema = {\r",
							"    type: 'object',\r",
							"    properties: {\r",
							"        id: { type: 'string' },\r",
							"        name: { type: 'string' },\r",
							"        data: { type: ['object', 'null'] }\r",
							"    },\r",
							"    required: ['id', 'name', 'data']\r",
							"};\r",
							"pm.test(\"Validate the required schema for each object in the response\", function () {\r",
							"    response.forEach(item => {\r",
							"        pm.expect(item).to.be.jsonSchema(expectedSchema);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/objects?id=3&id=5",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"objects"
					],
					"query": [
						{
							"key": "id",
							"value": "3"
						},
						{
							"key": "id",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Single object",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test: Status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test: Response is an object with expected structure\r",
							"pm.test(\"Response is an object with expected structure\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.be.an('object');\r",
							"    pm.expect(response).to.have.property('id').that.is.an(\"string\");\r",
							"    pm.expect(response).to.have.property('name').that.is.an(\"string\");\r",
							"    pm.expect(response).to.have.property('data').that.is.an('object');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/objects/7",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"objects",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add object",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed the test for checking properties\r",
							"pm.test(\"Status code is 200 or 201\", function () {\r",
							"    pm.expect([200, 201]).to.include(pm.response.code);\r",
							"});\r",
							"\r",
							"// Test: Response contains created object with id, name, and data\r",
							"pm.test(\"Response contains created object with id, name, and data\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
							"\r",
							"    pm.expect(response).to.have.property('id');\r",
							"    pm.expect(response).to.have.property('name').that.is.a('string').that.equals(requestBody.name);\r",
							"    pm.expect(response).to.have.property('data').that.is.an('object');\r",
							"\r",
							"    // Validate each property in the data object\r",
							"    const expectedData = requestBody.data;\r",
							"    for (const key in expectedData) {\r",
							"        pm.expect(response.data).to.have.property(key).that.equals(expectedData[key]);\r",
							"    }\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"name\": \"\",\r\n   \"data\": {\r\n      \"year\": 2025,\r\n      \"price\": 2349.99,\r\n      \"CPU model\": \"M4 Max\",\r\n      \"Hard disk size\": \"1 TB\"\r\n   }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/objects",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"objects"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api.restful-api.dev",
			"type": "default"
		}
	]
}