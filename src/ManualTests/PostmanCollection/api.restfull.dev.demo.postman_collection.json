{
	"info": {
		"_postman_id": "ac8994b1-a2f2-4484-a75d-93e2b65ec120",
		"name": "api.restfull.dev.demo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10606446"
	},
	"item": [
		{
			"name": "List of all objects",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test: Status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test: Response is an array with at least 1 object\r",
							"pm.test(\"Response is an array with at least 1 object\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.be.an('array').that.has.length.greaterThan(0);\r",
							"});\r",
							"\r",
							"// Test: Validate the required schema for each object in the response\r",
							"const response = pm.response.json();\r",
							"const expectedSchema = {\r",
							"    type: 'object',\r",
							"    properties: {\r",
							"        id: { type: 'string' },\r",
							"        name: { type: 'string' },\r",
							"        data: {\r",
							"            type: ['object', 'null']\r",
							"        }\r",
							"    },\r",
							"    required: ['id', 'name', 'data']\r",
							"};\r",
							"pm.test(\"Validate the required schema for each object in the response\", function () {\r",
							"    response.forEach(item => {\r",
							"        pm.expect(item).to.be.jsonSchema(expectedSchema);\r",
							"    });\r",
							"});\r",
							"\r",
						"pm.sendRequest({ url: pm.environment.get('baseUrl') + '/invalid-endpoint', method: 'GET' }, function (err, res) {\r",
						"    pm.test('Invalid endpoint returns 404', function () {\r",
						"        pm.expect(res.code).to.eql(404);\r",
						"    });\r",
						"});\r"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/objects",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"objects"
					]
				}
			},
			"response": []
		},
		{
			"name": "List of objects by ids",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test: Status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test: Response is an array with at least 1 object\r",
							"pm.test(\"Response is an array with at least 1 object\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.be.an('array').that.has.length.greaterThan(0);\r",
							"});\r",
							"\r",
							"// Test: Validate the required schema for each object in the response\r",
							"const response = pm.response.json();\r",
							"const expectedSchema = {\r",
							"    type: 'object',\r",
							"    properties: {\r",
							"        id: { type: 'string' },\r",
							"        name: { type: 'string' },\r",
							"        data: { type: ['object', 'null'] }\r",
							"    },\r",
							"    required: ['id', 'name', 'data']\r",
							"};\r",
							"pm.test(\"Validate the required schema for each object in the response\", function () {\r",
							"    response.forEach(item => {\r",
							"        pm.expect(item).to.be.jsonSchema(expectedSchema);\r",
							"    });\r",
							"});\r"
						,
						"pm.sendRequest({ url: pm.environment.get('baseUrl') + '/objects?id=99999', method: 'GET' }, function (err, res) {\r",
						"    pm.test('Non-existent IDs returns empty array or 404', function () {\r",
						"        pm.expect([200, 404]).to.include(res.code);\r",
						"        if (res.code === 200) {\r",
						"            pm.expect(res.json()).to.be.an('array').that.is.empty;\r",
						"        }\r",
						"    });\r",
						"});\r"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/objects?id=3&id=5",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"objects"
					],
					"query": [
						{
							"key": "id",
							"value": "3"
						},
						{
							"key": "id",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Single object",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test: Status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test: Response is an array with exactly 1 object\r",
							"pm.test(\"Response is an array with exactly 1 object\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.be.an('array').that.has.lengthOf(1);\r",
							"});\r",
							"\r",
							"// Test: Validate the required schema for the object in the response\r",
							"const response = pm.response.json();\r",
							"const expectedSchema = {\r",
							"    type: 'object',\r",
							"    properties: {\r",
							"        id: { type: 'string' },\r",
							"        name: { type: 'string' },\r",
							"        data: { type: ['object', 'null'] }\r",
							"    },\r",
							"    required: ['id', 'name', 'data']\r",
							"};\r",
							"pm.test(\"Validate the required schema for the object in the response\", function () {\r",
							"    pm.expect(response[0]).to.be.jsonSchema(expectedSchema);\r",
							"});\r"
						,
						"pm.sendRequest({ url: pm.environment.get('baseUrl') + '/objects?id=99999', method: 'GET' }, function (err, res) {\r",
						"    pm.test('Non-existent ID returns empty array or 404', function () {\r",
						"        pm.expect([200, 404]).to.include(res.code);\r",
						"        if (res.code === 200) {\r",
						"            pm.expect(res.json()).to.be.an('array').that.is.empty;\r",
						"        }\r",
						"    });\r",
						"});\r"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/objects?id=7",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"objects"
					],
					"query": [
						{
							"key": "id",
							"value": "7"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add object",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test: Status code is 200 or 201\r",
							"pm.test(\"Status code is 200 or 201\", function () {\r",
							"    pm.expect([200, 201]).to.include(pm.response.code);\r",
							"});\r",
							"\r",
							"// Test: Response contains created object with id, name, and data\r",
							"const response = pm.response.json();\r",
							"pm.test(\"Response contains created object with id, name, and data\", function () {\r",
							"    pm.expect(response).to.have.property('id');\r",
							"    pm.expect(response).to.have.property('name');\r",
							"    pm.expect(response).to.have.property('data');\r",
							"});\r"
						,
						"pm.sendRequest({\r",
						"    url: pm.environment.get('baseUrl') + '/objects/doesnotexist',\r",
						"    method: 'PATCH',\r",
						"    header: { 'Content-Type': 'application/json' },\r",
						"    body: {\r",
						"        mode: 'raw',\r",
						"        raw: JSON.stringify({ name: 'Test' })\r",
						"    }\r",
						"}, function (err, res) {\r",
						"    pm.test('Patch non-existent object returns 404, 400, or 422', function () {\r",
						"        pm.expect([404, 400, 422]).to.include(res.code);\r",
						"    });\r",
						"});\r"
						,
						"pm.sendRequest({\r",
						"    url: pm.environment.get('baseUrl') + '/objects/doesnotexist',\r",
						"    method: 'PUT',\r",
						"    header: { 'Content-Type': 'application/json' },\r",
						"    body: {\r",
						"        mode: 'raw',\r",
						"        raw: JSON.stringify({ name: 'Test', data: {} })\r",
						"    }\r",
						"}, function (err, res) {\r",
						"    pm.test('Update non-existent object returns 404, 400, or 422', function () {\r",
						"        pm.expect([404, 400, 422]).to.include(res.code);\r",
						"    });\r",
						"});\r"
						,
						"pm.sendRequest({\r",
						"    url: pm.environment.get('baseUrl') + '/objects',\r",
						"    method: 'POST',\r",
						"    header: { 'Content-Type': 'application/json' },\r",
						"    body: {\r",
						"        mode: 'raw',\r",
						"        raw: JSON.stringify({ data: { year: 2025 } })\r",
						"    }\r",
						"}, function (err, res) {\r",
						"    pm.test('Missing required field returns 400 or 422', function () {\r",
						"        pm.expect([400, 422]).to.include(res.code);\r",
						"    });\r",
						"});\r"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"name\": \"Apple MacBook M4 Pro\",\r\n   \"data\": {\r\n      \"year\": 2025,\r\n      \"price\": 2349.99,\r\n      \"CPU model\": \"M4 Max\",\r\n      \"Hard disk size\": \"1 TB\"\r\n   }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/objects",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"objects"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update object",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test: Status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test: Response contains updated object with id, name, and data\r",
							"const response = pm.response.json();\r",
							"pm.test(\"Response contains updated object with id, name, and data\", function () {\r",
							"    pm.expect(response).to.have.property('id');\r",
							"    pm.expect(response).to.have.property('name');\r",
							"    pm.expect(response).to.have.property('data');\r",
							"});\r"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"name\": \"Apple MacBook Pro 16\",\r\n   \"data\": {\r\n      \"year\": 2019,\r\n      \"price\": 2049.99,\r\n      \"CPU model\": \"Intel Core i9\",\r\n      \"Hard disk size\": \"1 TB\",\r\n      \"color\": \"silver\"\r\n   }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/objects/ff8081819782e69e0197ae6f9d1e7d06",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"objects",
						"ff8081819782e69e0197ae6f9d1e7d06"
					]
				}
			},
			"response": []
		},
		{
			"name": "Partially update object",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test: Status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test: Response contains updated object with id, name, and data\r",
							"const response = pm.response.json();\r",
							"pm.test(\"Response contains updated object with id, name, and data\", function () {\r",
							"    pm.expect(response).to.have.property('id');\r",
							"    pm.expect(response).to.have.property('name');\r",
							"    pm.expect(response).to.have.property('data');\r",
							"});\r"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"name\": \"Apple MacBook Pro M4 (Updated Name)\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/objects/ff8081819782e69e0197ae6f9d1e7d06",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"objects",
						"ff8081819782e69e0197ae6f9d1e7d06"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete object",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test: Status code is 200 or 204\r",
							"pm.test(\"Status code is 200 or 204\", function () {\r",
							"    pm.expect([200, 204]).to.include(pm.response.code);\r",
							"});\r",
							"\r",
							"// Test: Response body is empty or contains a confirmation message\r",
							"pm.test(\"Response body is empty or contains a confirmation message\", function () {\r",
							"    const body = pm.response.text();\r",
							"    pm.expect(body === '' || body.includes('success') || body.includes('deleted')).to.be.true;\r",
							"});\r"
						,
						"pm.sendRequest({ url: pm.environment.get('baseUrl') + '/objects/doesnotexist', method: 'DELETE' }, function (err, res) {\r",
						"    pm.test('Delete non-existent object returns 404, 400, or 422', function () {\r",
						"        pm.expect([404, 400, 422]).to.include(res.code);\r",
						"    });\r",
						"});\r"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/objects/6",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"objects",
						"6"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api.restful-api.dev",
			"type": "default"
		}
	]
}