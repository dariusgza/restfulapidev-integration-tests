name: Run .NET API Integration Tests

on:
  push:
    branches:
        - '*'
  pull_request:
    branches:
        - '*'
  schedule:
      - cron: '0 0 1 * *' # Runs at midnight on the first day of every month 
  workflow_dispatch:

permissions:
  checks: write
  pull-requests: write
  contents: read

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '20.x'
  BUILD_CONFIGURATION: Release

jobs:
  dotnet-tests:
    name: .NET Integration Tests
    runs-on: ubuntu-latest
    outputs:
      test-results: ${{ steps.test-run.outputs.test-results }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore IntegrationTests/restfulapidev-integration-tests.csproj
        working-directory: ${{ github.workspace }}

      - name: Build solution
        run: dotnet build IntegrationTests/restfulapidev-integration-tests.csproj --no-restore --configuration ${{ env.BUILD_CONFIGURATION }}
        working-directory: ${{ github.workspace }}

      - name: Run tests
        id: test-run
        run: |
          echo "Creating test results directory..."
          mkdir -p ./test-results
          
          echo "Running dotnet test..."
          dotnet test IntegrationTests/restfulapidev-integration-tests.csproj \
            --no-build \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --logger "trx;LogFileName=${{ github.workspace }}/test-results/integration-test-results.trx" \
            --logger "console;verbosity=normal" \
            || echo "Tests completed with errors (possibly due to API rate limiting)"
          
          echo "Checking if TRX file was created..."
          if [ -f "${{ github.workspace }}/test-results/integration-test-results.trx" ]; then
            echo "TRX file found!"
            ls -la "${{ github.workspace }}/test-results/"
            echo "test-results=success" >> $GITHUB_OUTPUT
          else
            echo "TRX file not found!"
            ls -la "${{ github.workspace }}/test-results/" || echo "test-results directory not found"
            echo "test-results=failed" >> $GITHUB_OUTPUT
          fi
        working-directory: ${{ github.workspace }}
        continue-on-error: true

      - name: Find test results (debug)
        if: always()
        run: find . -name 'integration-test-results.trx' -print
        working-directory: ${{ github.workspace }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-test-results
          path: 'test-results/integration-test-results.trx'
          retention-days: 30

      - name: Publish .NET Test Results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: 'test-results/integration-test-results.trx'
          check_name: '.NET Integration Test Results'

  postman-tests:
    name: Postman API Tests
    runs-on: ubuntu-latest
    needs: dotnet-tests
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Newman
        run: npm install -g newman

      - name: Run Postman collection with Newman
        id: newman-run
        run: |
          # Add delay to avoid rate limiting
          sleep 5
          newman run ./src/ManualTests/PostmanCollection/api.restfull.dev.demo.postman_collection.json \
            --reporters cli,junit \
            --reporter-junit-export=postman-results.xml \
            --timeout-request 30000 \
            --delay-request 1000 \
            --bail
        continue-on-error: true

      - name: Parse Newman results
        if: always()
        id: newman-results
        run: |
          if [ -f postman-results.xml ]; then
            total=$(grep -o '<testcase' postman-results.xml | wc -l)
            failed=$(grep -o '<failure' postman-results.xml | wc -l)
            passed=$((total - failed))
            
            echo "total=$total" >> $GITHUB_OUTPUT
            echo "passed=$passed" >> $GITHUB_OUTPUT
            echo "failed=$failed" >> $GITHUB_OUTPUT
            echo "results-found=true" >> $GITHUB_OUTPUT
            
            echo "## Newman API Test Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Total | Passed | Failed |" >> $GITHUB_STEP_SUMMARY
            echo "|-------|--------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| $total | $passed | $failed |" >> $GITHUB_STEP_SUMMARY
            
            # Fail the step if there were failures
            if [ $failed -gt 0 ]; then
              echo "::error::$failed Newman tests failed"
              exit 1
            fi
          else
            echo "results-found=false" >> $GITHUB_OUTPUT
            echo "## Newman API Test Results" >> $GITHUB_STEP_SUMMARY
            echo "❌ No postman-results.xml file found." >> $GITHUB_STEP_SUMMARY
            echo "::error::Newman results file not found"
            exit 1
          fi

      - name: Upload Postman test results
        if: always() && steps.newman-results.outputs.results-found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: postman-test-results
          path: postman-results.xml
          retention-days: 30

  security-scan:
    name: Security Scan (ZAP)
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target: 'https://api.restful-api.dev/'
          allow_issue_writing: false
          fail_action: false

      - name: Upload ZAP Scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-security-results
          path: |
            report_md.md
            report_html.html
            report_json.json
          retention-days: 30

      - name: Add ZAP Scan report to summary
        if: always()
        run: |
          if [ -f report_md.md ]; then
            echo "## 🔒 Security Scan Results (ZAP Baseline)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cat report_md.md >> $GITHUB_STEP_SUMMARY
          else
            echo "## 🔒 Security Scan Results (ZAP Baseline)" >> $GITHUB_STEP_SUMMARY
            echo "❌ No ZAP scan results found." >> $GITHUB_STEP_SUMMARY
          fi

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [dotnet-tests, postman-tests, security-scan]
    if: always()
    steps:
      - name: Generate final summary
        run: |
          echo "# 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # .NET Tests
          if [ "${{ needs.dotnet-tests.result }}" == "success" ]; then
            echo "✅ **.NET Integration Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **.NET Integration Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Postman Tests
          if [ "${{ needs.postman-tests.result }}" == "success" ]; then
            echo "✅ **Postman API Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.postman-tests.result }}" == "failure" ]; then
            echo "❌ **Postman API Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Postman API Tests**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Security Scan
          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "✅ **Security Scan**: Completed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.security-scan.result }}" == "failure" ]; then
            echo "⚠️ **Security Scan**: Issues found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Security Scan**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Workflow Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY